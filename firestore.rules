rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---- Coleção de Usuários ----
    match /usuarios/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // ninguém pode deletar usuários

      // Validação dos campos básicos
      allow update: if request.resource.data.keys().hasAll(["createdAt", "email", "isRegistered", "name", "userId"]) &&
                    request.resource.data.createdAt is timestamp &&
                    request.resource.data.email is string &&
                    request.resource.data.isRegistered is bool &&
                    request.resource.data.name is string &&
                    request.resource.data.userId == userId &&
                    request.auth.uid == userId;
    }

    // ---- Coleção de Jogadoras ----
    match /jogadoras/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // não permitir exclusão direta

      // Validação dos campos obrigatórios
      allow update: if request.resource.data.keys().hasAll(
                      ["address", "birthDate", "cpf", "isRegistered", "name", "phone", "position", "registrationDate", "registrationMethod"]
                    ) &&
                    request.resource.data.address is string &&
                    request.resource.data.birthDate is timestamp &&
                    request.resource.data.cpf is string &&
                    request.resource.data.isRegistered is bool &&
                    request.resource.data.name is string &&
                    request.resource.data.phone is string &&
                    request.resource.data.position is string &&
                    request.resource.data.registrationDate is timestamp &&
                    request.resource.data.registrationMethod is string &&
                    request.auth.uid == userId;
    }

    // ---- Coleção de Artigos ----
    match /articles/{articleId} {
      // Qualquer usuário autenticado pode ler, criar, atualizar e deletar artigos
      allow read, write: if request.auth != null;
    }

    // ---- Coleção de Avisos (para futuras implementações) ----
    match /announcements/{announcementId} {
      // Qualquer usuário autenticado pode ler avisos
      allow read: if request.auth != null;
      
      // Apenas admins podem criar, atualizar ou deletar avisos
      allow create, update, delete: if request.auth != null && 
                                      exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
                                      get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
